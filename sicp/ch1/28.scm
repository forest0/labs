(define (non-trivial-root? a n)
  (and (not (= a 1))
       (not (= a (- n 1)))
       (= (remainder (square a) n) 1)))

(define (expmod base exp n)
  (cond ((= exp 0) 1)
        ((non-trivial-root? base n)
         (display "non-trivial-root found: ")
         (display base)
         0)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) n))
                    n))
        (else (remainder (* base (expmod base (- exp 1) n))
                         n))))

(define (non-zero-random n)
  (let ((r (random n)))
    (if (= r 0)
        (non-zero-random n)
        r)))

(define (Miller-Rabin-test n)
  (define (test-iter n times)
    (cond ((= times 0)
           #t); probably
          ((= 1 (expmod (non-zero-random n) (- n 1) n))
           (test-iter n (- times 1)))
          (else #f)))
  (let ((times (ceiling (/ n 2))))
    (test-iter n times)))
