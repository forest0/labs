(define (install-syntax-define eval-table)
  (define eval (eval-table 'get 'eval))
  (define make-lambda (eval-table 'get 'make-lambda))
  (define define-variable! (eval-table 'get 'define-variable!))

  (define (definition-variable exp)
    (if (symbol? (cadr exp))
        (cadr exp)
        (caadr exp)))
  (define (definition-value exp)
    (if (symbol? (cadr exp))
        (caddr exp)
        (make-lambda (cdadr exp)
                     (cddr exp))))

  (define (eval-definition exp env)
    (define-variable! (definition-variable exp)
                         (eval (definition-value exp) env)
                         env)
    'ok)

  (define (make-define var val)
    (cons 'define (cons var val)))

  (define (definition? exp)
    (and (pair? exp)
         (eq? (car exp) 'define)))

  (eval-table 'put 'define eval-definition)
  (eval-table 'put 'make-define make-define)
  (eval-table 'put 'definition? definition?)
  (eval-table 'put 'definition-variable definition-variable)
  (eval-table 'put 'definition-value definition-value)
  'done)
