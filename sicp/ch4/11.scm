; before: ((a b c d) (1 2 3 4))
;  after: ((a 1) (b 2) (c 3) (d 4))

(define make-frame zip)

(define (frame-variables frame)
  (map car frame))

(define (frame-values frame)
  (map cadr frame))

; insert to the second item, 1-indexed
(define (add-binding-to-frame! var val frame)
  (set-cdr! frame (cons (list var val)
                        (cdr frame))))

(define (lookup-variable-value var env)
  (define (env-loop cur-env)
    (define (scan bindings)
      (cond ((null? bindings)
             (env-loop (enclosing-environment cur-env)))
            ((eq? var (first-variable bindings))
             (first-value bindings))
            (else (scan (cdr bindings)))))
    (if (null? cur-env)
        (error "Unbound variable -- LOOKUP" var)
        (scan (first-frame cur-env))))
  (env-loop env))

(define (set-variable-value! var val env)
  (define (env-loop cur-env)
    (define (scan bindings)
      (cond ((null? bindings)
             (env-loop (enclosing-environment cur-env)))
            ((eq? var (first-variable bindings))
             (set-car! bindings (list var val)))
            (else (scan (cdr bindings)))))
    (if (null? cur-env)
        (error "Unbound variable -- SET!" var)
        (scan (first-frame cur-env))))
  (env-loop env))

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan bindings)
      (cond ((null? bindings)
             (add-binding-to-frame! var val frame))
            ((eq? var (first-variable bindings))
             (set-car! bindings (list var val)))
            (else (scan (cdr bindings)))))
    (scan frame)))
